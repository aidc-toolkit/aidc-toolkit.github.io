name: Publish to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types:
      - published

permissions:
  id-token: write
  pages: write

jobs:
  check-event:
    runs-on: ubuntu-latest

    outputs:
      run-publish: ${{ steps.check-event.outputs.run-publish }}

    steps:
      - name: Checkout default repository (doc) with tags
        if: github.event_name != 'release'
        uses: actions/checkout@v4

      - name: Check event
        id: check-event
        run: |
          if [[ "${{ github.event_name }}" != "release" ]]
          then
            # Get the tags for the branch; fetch-tags on checkout not working.
            git fetch
  
            # Publish will be skipped if it has a tag that matches the version format.
            if [[ `git tag --points-at HEAD "v*.*.*" | wc -l` -eq 0 ]]
            then
              echo "Non-release without version tag - publish will run"
              run_publish=true
            else
              echo "Non-release with version tag - publish will not run"
              run_publish=false
            fi
          else
            # Publish is always run on release.
            echo "Release - publish will run"
            run_publish=true
          fi
          
          echo run-publish=$run_publish >> "$GITHUB_OUTPUT"

  publish:
    needs: check-event

    if: needs.check-event.outputs.run-publish == 'true'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Dump vars
        if: vars.DUMP_VARS == 'true'
        run: |
          cat << EOF
          ${{ toJSON(vars) }}
          EOF

      - name: Dump GitHub context
        if: vars.DUMP_GITHUB_CONTEXT == 'true'
        run: |
          cat << EOF
          ${{ toJSON(github) }}
          EOF

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/

      - name: Checkout default repository (doc)
        uses: actions/checkout@v4

      - name: Build Writerside artifact
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: Writerside/doc
          artifact: webHelpDOC2-all
          docker-version: ${{ vars.WRITERSIDE_DOCKER_VERSION }}

      - name: Start terminal session (post doc)
        if: vars.TERMINAL_POST_DOC == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Finalize doc
        run: |
          # Enable glob expansion.
          shopt -s extglob nullglob

          # Move all except .github to doc directory.
          mkdir doc
          mv .!(|.|github) !(doc) doc/

          # Unzip artifact to pages directory
          unzip -qq doc/artifacts/webHelpDOC2-all -d pages

      - name: Start terminal session (post doc)
        if: vars.TERMINAL_POST_FINALIZE == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Build dev
        uses: ./.github/actions/build-project-doc
        with:
          project: dev

      - name: Build core
        uses: ./.github/actions/build-project-doc
        with:
          project: core

      - name: Build utility
        uses: ./.github/actions/build-project-doc
        with:
          project: utility

      - name: Build gs1
        uses: ./.github/actions/build-project-doc
        with:
          project: gs1

      - name: Build demo
        uses: ./.github/actions/build-project-doc
        with:
          project: demo
          build_parameters: --outDir ../pages/demo

      - name: Start terminal session (post build)
        if: vars.TERMINAL_POST_BUILD == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Generate API documentation
        uses: ./.github/actions/build-project-doc
        with:
          project: doc
          build_parameters: --out ../pages/api

      - name: Create repository state file
        run: |
          cat > pages/repository.txt << EOF
          Date: `date`
          Ref: $GITHUB_REF
          Commit: $GITHUB_SHA
          EOF

      - name: Start terminal session (post API)
        if: vars.TERMINAL_POST_API == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Save release
        if: github.event_name == 'release'
        run: |
          # Create pages.zip in root directory then move to pages directory.
          cd pages
          zip -q -r ../pages .
          mv ../pages.zip .

          # Release is its own preview.
          unzip -qq pages.zip -d preview

      - name: Restore release
        if: github.event_name != 'release'
        run: |
          # Enable glob expansion.
          shopt -s extglob nullglob

          # Move pages to pages/preview directory.
          cd pages
          mkdir preview
          mv .!(|.) !(preview) preview/

          # Get and unzip release version.
          curl -s https://aidc-toolkit.com/pages.zip -o pages.zip
          unzip -qq pages.zip

      - name: Start terminal session (post release)
        if: vars.TERMINAL_POST_RELEASE == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Patch preview
        run: |
          cd pages/preview
          find . -name "*.html" -print0 | xargs -0 sed -i -e 's/https:\/\/aidc-toolkit.com/https:\/\/aidc-toolkit.com\/preview/g'

      - name: Start terminal session (post patch)
        if: vars.TERMINAL_POST_PATCH == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload pages directory
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Start terminal session (post deploy)
        if: vars.TERMINAL_POST_DEPLOY == 'true'
        uses: mxschmitt/action-tmate@v3
