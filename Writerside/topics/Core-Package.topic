<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Core Package" id="Core-Package">
    <p>
        The <code>core</code> package provides support for internationalization, built on the robust and popular
        <a href="https://i18next.com">i18next</a> package. Applications can take advantage of the additional abstraction
        provided by the <code>core</code> package by
        <a href="%apiBase%/functions/Core.i18nAddResourceBundle.html">adding their own resource bundles</a> or can
        manage internationalization themselves.
    </p>

    <chapter title="Internationalization" id="internationalization">
        <p>
            Applications built on the AIDC Toolkit <format style="bold">must</format> initialize internationalization
            first via this package. Support is available for the following environments:
        </p>

        <list>
            <li>
                <a href="#command-line-interface">Command-line interface</a>
                <list>
                    <li>Unit tests</li>
                    <li>Batch applications</li>
                </list>
            </li>
            <li>
                Web server
                <warning>
                    Not yet implemented.
                </warning>
            </li>
            <li>
                <a href="#web-browser">Web browser</a>
            </li>
        </list>

        <chapter title="Command-line interface" id="command-line-interface">
            <p>
                Initializing internationalization for a command-line interface application is straightforward:
            </p>

            <code-block lang="typescript" noinject="true">
                await i18nInit(I18NEnvironment.CLI);
            </code-block>
        </chapter>

        <chapter title="Web browser" id="web-browser">
            <p>
                Initializing internationalization for a web browser requires awaiting the fulfillment of the
                <code>Promise</code> returned by the call to <code>i18nInit()</code> before rendering any content. For
                example, in the React framework, this may be accomplished as follows:
            </p>

            <procedure id="web-browser-internationalization">
                <step>
                    <p>
                        Define an application state variable.
                    </p>

                    <code-block lang="typescript" noinject="true">
                        interface AppState {
                            i18nInitialized: boolean;
                            // Define additional state variables here.
                        }
                    </code-block>
                </step>

                <step>
                    <p>
                        Define the application class and initialize the state.
                    </p>

                    <code-block lang="typescript" noinject="true">
                        export default class App extends AppComponent&lt;object, AppState&gt; {
                            override state: AppState = {
                                i18nInitialized: false,
                                // Initialize additional state variables here.
                            };

                            // Remainder of class.
                        }
                    </code-block>
                </step>

                <step>
                    <p>
                        Override the <code>componentDidMount()</code> method to initialize internationalization and to
                        force refresh once the <code>Promise</code> is fulfilled.
                    </p>

                    <code-block lang="typescript" noinject="true">
                        override componentDidMount(): void {
                            i18nInit(I18NEnvironment.Browser, true).then((initialized) => {
                                if (initialized) {
                                    // Force refresh.
                                    this.setState(state => ({
                                        ...state,
                                        i18nInitialized: initialized
                                    }));
                                }
                            }).catch((e: unknown) => {
                                console.error(e);
                                alert(e);
                            });
                        }
                    </code-block>
                </step>

                <step>
                    <p>
                        Override the <code>render()</code> method to render the initial content, but only once the
                        application has been initialized.
                    </p>

                    <code-block lang="typescript" noinject="true">
                        override render(): ReactElement {
                            return this.state.i18nInitialized ?
                                // Render the application.
                                &lt;Navbar className="d-flex" expand="lg"&gt;
                                    // ...
                                &lt;/Navbar&gt; :
                                    // Render nothing.
                                &lt;&gt;&lt;/&gt;;
                        }
                    </code-block>
                </step>
            </procedure>

            <tip>
                For a complete example, including how to use application-specific resource bundles, see the
                <a href="%gitHubBase%/demo">AIDC Toolkit demo source</a>.
            </tip>
        </chapter>
    </chapter>
</topic>
