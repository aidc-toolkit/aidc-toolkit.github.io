<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Utility Package" id="Utility-Package">
    <p>
        The <code>utility</code> package provides classes to manipulate integers and strings, independently of any AIDC
        problem domain. The package has been designed to maximize performance and minimize memory by reducing many of
        the typical AIDC requirements, such as serial number generation, to on-demand generation using the JavaScript
        <code>Iterable</code> and <code>IterableIterator</code> types.
    </p>

    <p>
        To provide the most flexibility and to handle the most significant demands of the AIDC problem domain, the AIDC
        Toolkit uses the JavaScript <code>bigint</code> type, with many functions converting from the lower-range
        <code>number</code> type if provided. This gives applications significant flexibility at a small performance
        cost inherent in <code>bigint</code> operations.
    </p>

    <chapter title="Integers" id="integers">
        <chapter title="Sequencer" id="sequencer">
            <p>
                Many of AIDC processes can be reduced to a simple statement about sequences:
            </p>

            <list>
                <li>
                    "Give me a million serial numbers for manufacturing."
                </li>
                <li>
                    "Generate a handful of GTINs for my new product line."
                </li>
                <li>
                    "Label the containers in the shipping area with SSCCs."
                </li>
            </list>

            <p>
                Each statement has a quantity and an output. Implicit in them, however, is the requirement that the
                generated output be unique, not only within itself, but also within any previous outputs generated. A
                sequencer is simply a utility to generate a sequence of integers given a start value and a count.
            </p>

            <tip>
                The AIDC Toolkit is not responsible for maintaining the history of any sequencer. It is up to the
                application to ensure that the start value and count don't overlap with any other start value and count
                for a sequencer used for the same purpose.
            </tip>

            <procedure title="Creating and using a sequencer" id="creating-and-using-a-sequencer">
                <step>
                    <p>
                        Create a sequencer with a start value and a count. The count is typically positive, which means
                        that the sequencer runs from the start value up. If negative, the sequencer runs from the start
                        value down.
                    </p>

                    <code-block lang="typescript" noinject="true">
                        // Sequencer starts at 33,000 and will iterate 1,000 times.
                        const sequencer = new Sequencer(33000, 1000);
                    </code-block>
                </step>

                <step>
                    <p>
                        Use the sequencer.
                    </p>

                    <procedure id="using-a-sequencer" type="choices">
                        <step>
                            <p>
                                Use it in a <code>for</code> loop.
                            </p>

                            <code-block lang="typescript" noinject="true">
                                for (const value of sequencer) {
                                    console.log(value);
                                }
                            </code-block>
                        </step>

                        <step>
                            <p>
                                Use it as an <code>Iterator</code>.
                            </p>

                            <code-block lang="typescript" noinject="true">
                                let done = false;

                                do {
                                    const next = sequencer.next();

                                    if (next.done !== true) {
                                        console.log(value);
                                    } else {
                                        done = true;

                                        // Sequencer returns absolute value of count when iterator is exhausted.
                                        console.log(`Total generated is ${next.value}`);
                                    }
                                } while (!done);
                            </code-block>
                        </step>

                        <step>
                            <p>
                                Transform it using an <code>Iterator</code> helper method.
                            </p>

                            <code-block lang="typescript" noinject="true">
                                const sum = Iterator.from(sequencer).reduce((accumulator, value) => accumulator + value, 0);
                            </code-block>
                        </step>

                        <step>
                            <p>
                                Pass it to a function.
                            </p>

                            <code-block lang="typescript" noinject="true">
                                // Generate sequence of 10-character hexadecimal strings.
                                const stringSequencer = HEXADECIMAL_STRING_CREATOR.create(10, sequencer);
                            </code-block>
                        </step>
                    </procedure>
                </step>
            </procedure>
        </chapter>

        <chapter title="Transformer" id="transformer">
            <p>
                A transformer transforms values in a numeric domain to values in a range equal to the domain or to
                another range defined by a callback function.
            </p>

            <p>
                There are two types of transformers defined in the AIDC Toolkit: the identity transformer and the
                encryption transformer. Regardless of the type, before any input value is transformed, it is validated
                against the domain provided when constructing the transformer; if the input value is less than zero or
                greater than or equal to the domain, an error is thrown.
            </p>

            <p>
                The identity transformer simply maps any input value to the same output value.
            </p>

            <p>
                The encryption transformer maps an input value to an output value resulting from repeated shuffle and
                xor operations defined by a tweak. In cryptography, a tweak is a value that alters an operation to
                change or "tweak" the output in a predictable and unique way that is hard to reverse engineer. Normally,
                a tweak works side by side with a password to generate a cryptographic key to ensure that no two
                systems can produce the same output from the same input and password; each system defines its own tweak
                and the password is kept by the user. Because the tweak is applied to every encryption operation, it is
                inherently less secure (e.g., a system administrator may know the tweak but that's not enough to
                compromise any user's encryption), but for the purposes of the AIDC Toolkit, it is secure enough.
            </p>

            <p>
                Suppose that you're manufacturing a product that is valuable enough to be of interest to counterfeiters.
                To protect the product, you want to generate a unique serial number for each one you put on the market.
                If anyone submits a warranty claim, the serial number will tell you whether the product is legitimate.
            </p>

            <p>
                You expect that you will manufacture at most 1,000,000 units of the product before releasing an
                upgrade, so your serial numbers are going to be numeric only and 6 digits long. If you generate the
                serial numbers in sequence, then generating 10 of them starting from unit 200,000 results in the
                following: 200000, 200001, 200002, 200003, 200004, 200005, 200006, 200007, 200008, 200009.
            </p>

            <code-block lang="typescript" noinject="true">
                // Transformer has a domain of 1,000,000; no tweak means that the identity transformer is used.
                for (const value of Transformer.get(1000000).forward(new Sequencer(200000, 10))) {
                    console.log(value);
                }
            </code-block>

            <p>
                The sequence is predictable and a counterfeiter can easily guess at valid serial numbers, which will
                cause problems for distributors and retailers when they see duplicates in the supply chain, problems for
                your customers who believe they are buying a legitimate product, and problems for you when you can't
                easily distinguish legitimate from counterfeit.
            </p>

            <p>
                The first thing you need to do is put some space between your serial numbers, to make guessing
                difficult. Let's say that in this case you make serial numbers 8 digits long, which means you have 100
                times the capacity of serial numbers as of your expected manufacturing run. Next, you use the encryption
                transformer, with the the tweak set to some random value (which you have to save and reuse to ensure
                that you don't generate any duplicates). Generating 10 serial numbers starting from unit 200,000 results
                in the following: 14608575, 00118914, 14609085, 00250498, 07625339, 85755635, 41179259, 67532896,
                02000912, 19087354.
            </p>

            <code-block lang="typescript" noinject="true">
                // Transformer has a domain of 100,000,000; tweak means that the encryption transformer is used.
                for (const value of Transformer.get(100000000, 8675309).forward(new Sequencer(200000, 10))) {
                    console.log(value);
                }
            </code-block>

            <p>
                The sequence is statistically random and a counterfeiter is highly unlikely to guess at valid serial
                numbers, which will make detection of illegitimate serial numbers significantly easier for all parties.
            </p>
        </chapter>

        <chapter title="Sequencer and Transformer" id="sequencer-and-transformer">
            <p>
                The <code>Transformer</code> class underlies most AIDC Toolkit operations involved in string creation.
                The <code>forward()</code> method takes either a single <code>bigint</code> value or an
                <code>Iterable&lt;bigint&gt;</code> of values. This provides maximum flexibility, but it comes at a
                cost. All inputs are validated prior to transformation, which can add to the system load when
                transforming a large number of values.
            </p>

            <p>
                When dealing with <code>Iterable</code> objects, transformers will recognize <code>Sequencer</code>
                objects and will validate the start value and count at the beginning rather than each value individually
                as they are transformed. This reduces the number of validations from however many entries there are in
                <code>Iterable</code> object to two. It also ensures that the client code deals with errors at the very
                beginning rather than in the middle of its processing.
            </p>

            <code-block lang="mermaid">
                flowchart TD
                    ValueOrValuesType{"Value(s) type"}
                        ValueOrValuesType -->|Single value| ValidateSingleValue{{Validate value}}
                            ValidateSingleValue --> ProcessSingleValue[[Process value]]
                            ProcessSingleValue --> Return["Return result(s)"]
                        ValueOrValuesType -->|Iterable| IterableType{Iterable type}
                            IterableType -->|Sequencer| ValidateMinimumValue{{Validate minimum value}}
                                ValidateMinimumValue --> ValidateMaximumValue{{Validate maximum value}}
                                ValidateMaximumValue --> ForEachSequencerValue[/For each value\]
                                ForEachSequencerValue --> ProcessSequencerValue[[Process value]]
                                    ProcessSequencerValue --> NextSequencerValue[\Next/]
                                NextSequencerValue -->|Not done| ProcessSequencerValue
                                NextSequencerValue -->|Done| Return
                            IterableType -->|Not Sequencer| ForEachIterableValue[/For each value\]
                                ForEachIterableValue --> ValidateIterableValue{{Validate value}}
                                    ValidateIterableValue --> ProcessIterableValue[[Process value]]
                                    ProcessIterableValue --> NextIterableValue[\Next/]
                                NextIterableValue -->|Not done| ValidateIterableValue
                                NextIterableValue -->|Done| Return
            </code-block>
        </chapter>
    </chapter>

    <chapter title="Strings" id="strings">
        <chapter title="String validation" id="string-validation">
            <p>
                Validation is a requirement for any application. The AIDC Toolkit provides a simple but extensible
                validation framework built on two interfaces:
                <a href="%gitHubPagesBase%/api/interfaces/Utility.StringValidation.html"><code>StringValidation</code>
                </a> and
                <a href="%gitHubPagesBase%/api/interfaces/Utility.StringValidator.html"><code>StringValidator</code>
                </a>. The two are related in that an interface extending <code>StringValidation</code> may be passed as
                a parameter to the <code>validate()</code> method of a class implementing <code>StringValidator</code>
                to restrict validation further. For example, the
                <a href="%gitHubPagesBase%/api/classes/Utility.CharacterSetValidator.html">
                <code>CharacterSetValidator</code></a> implementation accepts a
                <a href="%gitHubPagesBase%/api/interfaces/Utility.CharacterSetValidation.html">
                <code>CharacterSetValidation</code></a> object that can constrain the length and limit the way numeric
                values are expressed (e.g., exclude zero as the first character or exclude strings that are all
                numeric).
            </p>

            <p>
                The <code>StringValidation</code> interface is a placeholder only; it's empty, which, in a
                <a href="%tsHandbookBase%/type-compatibility.html">structurally typed</a> language like TypeScript,
                matches any object, so it's up to <code>StringValidator</code> implementations to decide what the
                implementation type should be.
            </p>

            <p>
                Validation is straightforward: if a string passed to a <code>validate()</code> method is valid, the
                method returns; if not, a <a href="%jsBase%/Reference/Global_Objects/RangeError"><code>RangeError</code>
                </a> is thrown.
            </p>

            <chapter title="Predefined validators" id="predefined-validators">
                <p>
                    The following validator types are predefined:
                </p>

                <table style="both">
                    <tr>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>Regular expression</td>
                        <td>
                            Validates a string against a <a href="%jsBase%/Guide/Regular_expressions">regular expression
                        </a>.
                        </td>
                    </tr>
                    <tr>
                        <td>Record</td>
                        <td>
                            Validates a string by looking it up in a
                            <a href="%tsHandbookBase%/utility-types.html#recordkeys-type"><code>Record</code></a>
                            object.
                        </td>
                    </tr>
                    <tr>
                        <td>Character set</td>
                        <td>
                            Validates a string by ensuring that each character is within a defined character set, with
                            additional validation parameters optionally constraining the length and limiting the way
                            numeric values are expressed. Predefined character set validators are:
                            <list>
                                <li>
                                    Numeric (0-9)
                                </li>
                                <li>
                                    Hexadecimal (0-9, A-F)
                                </li>
                                <li>
                                    Alphabetic (A-Z)
                                </li>
                                <li>
                                    Alphanumeric (0-9, A-Z)
                                </li>
                            </list>
                        </td>
                    </tr>
                </table>
            </chapter>
        </chapter>

        <chapter title="String creation" id="string-creation">
            <p>
                String creation varies depending on the type of string being created, so there's no single interface
                that can be implemented. There is a pattern, however:
            </p>

            <list>
                <li>
                    Creation is done via a <code>create()</code> method. If the class can create more than one type of
                    string, it can define additional <code>create<emphasis>NNN</emphasis>()</code> methods as
                    appropriate.
                </li>
                <li>
                    The <code>create()</code> (or <code>create<emphasis>NNN</emphasis>()</code>) method is overloaded,
                    with a parameter accepting either a single value to create a single string or multiple values to
                    create multiple strings.
                </li>
                <li>
                    If the value to create a string is numeric (<code>number</code> or <code>bigint</code>):
                    <list>
                        <li>
                            The method uses a <a href="#transformer">transformer</a> and supports sparse creation.
                        </li>
                        <li>
                            Because of this, passing in a <a href="#sequencer">sequencer</a> is
                            <a href="#sequencer-and-transformer">strongly recommended</a> when creating multiple
                            strings.
                        </li>
                    </list>
                </li>
            </list>

            <chapter title="Predefined creators" id="predefined-creators">
                <p>
                    The following creator types are predefined:
                </p>

                <table style="both">
                    <tr>
                        <td>Type</td>
                        <td>Description</td>
                    </tr>
                    <tr>
                        <td>Character set</td>
                        <td>
                            Creates strings by mapping numeric (<code>number</code> and <code>bigint</code>) values to
                            fixed-length string representations using the character set as the "digits" of the string.
                            Predefined character set creators are:
                            <list>
                                <li>
                                    Numeric (0-9)
                                </li>
                                <li>
                                    Hexadecimal (0-9, A-F)
                                </li>
                                <li>
                                    Alphabetic (A-Z)
                                </li>
                                <li>
                                    Alphanumeric (0-9, A-Z)
                                </li>
                            </list>
                        </td>
                    </tr>
                </table>
            </chapter>

            <chapter title="Output restriction" id="output-restriction">
                <p>
                    As with string validators, string creators can restrict their output to meet the needs of certain
                    use cases. For example, when creating serial numbers, it may be necessary to generate values that
                    either don't start with a zero (to prevent leading zeros from being dropped by other applications)
                    or that aren't composed entirely of digits (to prevent strings from being interpreted as numbers).
                </p>
            </chapter>

        </chapter>
    </chapter>
</topic>
